# import PhoneNumber from "./generated/prisma.graphql"

scalar HexValue
scalar EthereumAddressHexValue
scalar EthereumBlockHashHexValue
scalar EthereumTransactionHashHexValue

enum ETHEREUM_NETWORK {
  MAINNET
  ROPSTEN
  KOVAN
  RINKEBY
}

type Query {
  phoneNumber(hashedPhoneNumber: String!): PhoneNumber

  ethereumGasPrice(network: ETHEREUM_NETWORK): String!
  ethereumBlockNumber(network: ETHEREUM_NETWORK): Int!

  ethereumBlock(
    hash: EthereumBlockHashHexValue
    number: Int
    network: ETHEREUM_NETWORK
  ): EthereumBlock

  ethereumTransaction(
    hash: EthereumTransactionHashHexValue!
    network: ETHEREUM_NETWORK
  ): EthereumTransaction

  ethereumAddress(
    hash: EthereumAddressHexValue!
    network: ETHEREUM_NETWORK
  ): EthereumAddress
}

type Mutation {
  startPhoneNumberVerification(input: StartPhoneNumberVerificationInput!): Ack
  updatePhoneNumber(input: UpdatePhoneNumberInput!): UpdatePhoneNumberPayload
  deletePhoneNumber(input: DeletePhoneNumberInput!): Ack

  sendRawEthereumTransaction(
    input: SendRawEthereumTransactionInput!
  ): SendRawEthereumTransactionPayload
}

type Ack {
  ok: Boolean
}

type EthereumAddress {
  network: ETHEREUM_NETWORK!
  hash: EthereumAddressHexValue!
  balance: String!

  transactionCount: Int!
  transactions(
    startBlock: Int
    endBlock: Int
    page: Int
    offset: Int
  ): [EthereumTransaction!]
}

type EthereumTransaction {
  network: ETHEREUM_NETWORK!
  hash: EthereumTransactionHashHexValue!
  nonce: Int!
  block: EthereumBlock
  transactionIndex: Int!
  from: EthereumAddress
  to: EthereumAddress
  value: String!
  gas: Int!
  gasPrice: String!
  input: String!
}

type EthereumBlock {
  network: ETHEREUM_NETWORK!
  hash: EthereumBlockHashHexValue!
  number: Int!
  parent: EthereumBlock
  nonce: String!
  sha3Uncles: String!
  logsBloom: String!
  transactionsRoot: String!
  stateRoot: String!
  miner: EthereumAddress!
  difficulty: String!
  totalDifficulty: String!
  size: Int!
  extraData: String!
  gasLimit: Int!
  gasUsed: Int!
  timestamp: Int!
  transactions: [EthereumTransaction!]!
  transactionCount: Int!
  uncles: [EthereumBlock!]!
}

type PhoneNumber {
  hashedPhoneNumber: String!
  address: String!
  createdAt: DateTime!
  updatedAt: DateTime!

  ethereumAddress(network: ETHEREUM_NETWORK): EthereumAddress
}

type StartPhoneNumberVerificationInput {
  phoneNumber: String!
}

input UpdatePhoneNumberInput {
  phoneNumber: String!
  verificationCode: String!
  address: String!
}

type UpdatePhoneNumberPayload {
  phoneNumber: PhoneNumber
}

input DeletePhoneNumberInput {
  phoneNumber: String!
  verificationCode: String!
}

input SendRawEthereumTransactionInput {
  data: String!
  network: ETHEREUM_NETWORK
}

type SendRawEthereumTransactionPayload {
  ethereumTransaction: EthereumTransaction
}
